#!/usr/bin/env python3
import os
import sys
import json
import logging
from typing import Dict, Any

import google.generativeai as genai
from dotenv import load_dotenv

class LettaMemoryStorageTest:
    """
    Test script to verify if Letta can store Gemini-generated content in memory
    """
    def __init__(self):
        # Setup logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
        # Load environment variables
        load_dotenv(os.path.expanduser('~/.letta/env'))
        
        # Configure Gemini API
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            self.logger.error("Gemini API key not found in environment")
            raise ValueError("GEMINI_API_KEY must be set")
        
        genai.configure(api_key=api_key)
        
        # Initialize Gemini model
        self.model = genai.GenerativeModel(
            'gemini-2.0-flash',
            generation_config=genai.types.GenerationConfig(
                temperature=0.7,
                max_output_tokens=1024
            )
        )
        
        # Memory storage directory
        self.memory_dir = os.path.expanduser('~/.letta/memories')
        os.makedirs(self.memory_dir, exist_ok=True)
    
    def generate_memory_content(self, topic: str) -> Dict[str, Any]:
        """
        Generate content for potential memory storage
        
        :param topic: Topic for content generation
        :return: Generated content dictionary
        """
        try:
            # Generate detailed content about the topic
            response = self.model.generate_content(
                f"Create a comprehensive, structured memory entry about {topic}. "
                "Include key facts, insights, and potential applications. "
                "Format the response as a JSON-like structure suitable for memory storage."
            )
            
            # Parse the response
            content = response.text
            
            return {
                'success': True,
                'topic': topic,
                'content': content,
                'timestamp': os.getenv('LETTA_TIMESTAMP', '2025-03-14T21:22:03-06:00')
            }
        
        except Exception as e:
            self.logger.error(f"Content generation failed: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def attempt_memory_storage(self, memory_content: Dict[str, Any]):
        """
        Attempt to store generated content in Letta's memory
        
        :param memory_content: Content generated by Gemini
        """
        try:
            # Create a unique filename for the memory
            filename = f"{memory_content['topic'].replace(' ', '_').lower()}_{memory_content['timestamp']}.json"
            filepath = os.path.join(self.memory_dir, filename)
            
            # Write memory content to file
            with open(filepath, 'w') as f:
                json.dump(memory_content, f, indent=4)
            
            print(f"‚úÖ Memory stored successfully for topic: {memory_content['topic']}")
            print(f"Memory file: {filepath}")
            print("Memory Details:")
            print(json.dumps(memory_content, indent=2))
            
            return True
        
        except Exception as e:
            print(f"‚ùå Memory storage error: {e}")
            return False
    
    def run_test(self):
        """
        Run the Letta memory storage test
        """
        print("üß† Letta Memory Storage Test üß†")
        print("===============================")
        
        # Test topics for memory generation and storage
        test_topics = [
            "Quantum Machine Learning",
            "Sustainable AI Technologies",
            "Ethical Considerations in Artificial Intelligence"
        ]
        
        # Track successful memory storage
        storage_results = {}
        
        for topic in test_topics:
            print(f"\nüìç Testing memory storage for: {topic}")
            print("-" * 50)
            
            # Generate content
            memory_content = self.generate_memory_content(topic)
            
            if memory_content['success']:
                # Attempt to store in Letta memory
                storage_result = self.attempt_memory_storage(memory_content)
                storage_results[topic] = storage_result
            else:
                print(f"‚ùå Content generation failed for {topic}")
        
        # Summary of results
        print("\nüîç Memory Storage Test Summary:")
        print("--------------------------------")
        for topic, result in storage_results.items():
            print(f"{topic}: {'‚úÖ Stored' if result else '‚ùå Failed'}")
        
        # List stored memories
        print("\nüìÅ Stored Memories:")
        print("-------------------")
        for memory_file in os.listdir(self.memory_dir):
            print(memory_file)

def main():
    memory_test = LettaMemoryStorageTest()
    memory_test.run_test()

if __name__ == '__main__':
    main()
